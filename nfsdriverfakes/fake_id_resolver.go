// Code generated by counterfeiter. DO NOT EDIT.
package nfsdriverfakes

import (
	"sync"

	"code.cloudfoundry.org/dockerdriver"
	"code.cloudfoundry.org/nfsv3driver"
)

type FakeIdResolver struct {
	ResolveStub        func(env dockerdriver.Env, username string, password string) (uid string, gid string, err error)
	resolveMutex       sync.RWMutex
	resolveArgsForCall []struct {
		env      dockerdriver.Env
		username string
		password string
	}
	resolveReturns struct {
		result1 string
		result2 string
		result3 error
	}
	resolveReturnsOnCall map[int]struct {
		result1 string
		result2 string
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIdResolver) Resolve(env dockerdriver.Env, username string, password string) (uid string, gid string, err error) {
	fake.resolveMutex.Lock()
	ret, specificReturn := fake.resolveReturnsOnCall[len(fake.resolveArgsForCall)]
	fake.resolveArgsForCall = append(fake.resolveArgsForCall, struct {
		env      dockerdriver.Env
		username string
		password string
	}{env, username, password})
	fake.recordInvocation("Resolve", []interface{}{env, username, password})
	fake.resolveMutex.Unlock()
	if fake.ResolveStub != nil {
		return fake.ResolveStub(env, username, password)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fake.resolveReturns.result1, fake.resolveReturns.result2, fake.resolveReturns.result3
}

func (fake *FakeIdResolver) ResolveCallCount() int {
	fake.resolveMutex.RLock()
	defer fake.resolveMutex.RUnlock()
	return len(fake.resolveArgsForCall)
}

func (fake *FakeIdResolver) ResolveArgsForCall(i int) (dockerdriver.Env, string, string) {
	fake.resolveMutex.RLock()
	defer fake.resolveMutex.RUnlock()
	return fake.resolveArgsForCall[i].env, fake.resolveArgsForCall[i].username, fake.resolveArgsForCall[i].password
}

func (fake *FakeIdResolver) ResolveReturns(result1 string, result2 string, result3 error) {
	fake.ResolveStub = nil
	fake.resolveReturns = struct {
		result1 string
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeIdResolver) ResolveReturnsOnCall(i int, result1 string, result2 string, result3 error) {
	fake.ResolveStub = nil
	if fake.resolveReturnsOnCall == nil {
		fake.resolveReturnsOnCall = make(map[int]struct {
			result1 string
			result2 string
			result3 error
		})
	}
	fake.resolveReturnsOnCall[i] = struct {
		result1 string
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeIdResolver) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.resolveMutex.RLock()
	defer fake.resolveMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIdResolver) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ nfsv3driver.IdResolver = new(FakeIdResolver)
